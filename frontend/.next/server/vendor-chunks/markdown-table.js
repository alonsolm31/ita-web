"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/markdown-table";
exports.ids = ["vendor-chunks/markdown-table"];
exports.modules = {

/***/ "(rsc)/./node_modules/markdown-table/index.js":
/*!**********************************************!*\
  !*** ./node_modules/markdown-table/index.js ***!
  \**********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   markdownTable: () => (/* binding */ markdownTable)\n/* harmony export */ });\n/**\n * @typedef Options\n *   Configuration (optional).\n * @property {string|null|ReadonlyArray<string|null|undefined>} [align]\n *   One style for all columns, or styles for their respective columns.\n *   Each style is either `'l'` (left), `'r'` (right), or `'c'` (center).\n *   Other values are treated as `''`, which doesn‚Äôt place the colon in the\n *   alignment row but does align left.\n *   *Only the lowercased first character is used, so `Right` is fine.*\n * @property {boolean} [padding=true]\n *   Whether to add a space of padding between delimiters and cells.\n *\n *   When `true`, there is padding:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   When `false`, there is no padding:\n *\n *   ```markdown\n *   |Alpha|B    |\n *   |-----|-----|\n *   |C    |Delta|\n *   ```\n * @property {boolean} [delimiterStart=true]\n *   Whether to begin each row with the delimiter.\n *\n *   > üëâ **Note**: please don‚Äôt use this: it could create fragile structures\n *   > that aren‚Äôt understandable to some markdown parsers.\n *\n *   When `true`, there are starting delimiters:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   When `false`, there are no starting delimiters:\n *\n *   ```markdown\n *   Alpha | B     |\n *   ----- | ----- |\n *   C     | Delta |\n *   ```\n * @property {boolean} [delimiterEnd=true]\n *   Whether to end each row with the delimiter.\n *\n *   > üëâ **Note**: please don‚Äôt use this: it could create fragile structures\n *   > that aren‚Äôt understandable to some markdown parsers.\n *\n *   When `true`, there are ending delimiters:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   When `false`, there are no ending delimiters:\n *\n *   ```markdown\n *   | Alpha | B\n *   | ----- | -----\n *   | C     | Delta\n *   ```\n * @property {boolean} [alignDelimiters=true]\n *   Whether to align the delimiters.\n *   By default, they are aligned:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   Pass `false` to make them staggered:\n *\n *   ```markdown\n *   | Alpha | B |\n *   | - | - |\n *   | C | Delta |\n *   ```\n * @property {(value: string) => number} [stringLength]\n *   Function to detect the length of table cell content.\n *   This is used when aligning the delimiters (`|`) between table cells.\n *   Full-width characters and emoji mess up delimiter alignment when viewing\n *   the markdown source.\n *   To fix this, you can pass this function, which receives the cell content\n *   and returns its ‚Äúvisible‚Äù size.\n *   Note that what is and isn‚Äôt visible depends on where the text is displayed.\n *\n *   Without such a function, the following:\n *\n *   ```js\n *   markdownTable([\n *     ['Alpha', 'Bravo'],\n *     ['‰∏≠Êñá', 'Charlie'],\n *     ['üë©‚Äç‚ù§Ô∏è‚Äçüë©', 'Delta']\n *   ])\n *   ```\n *\n *   Yields:\n *\n *   ```markdown\n *   | Alpha | Bravo |\n *   | - | - |\n *   | ‰∏≠Êñá | Charlie |\n *   | üë©‚Äç‚ù§Ô∏è‚Äçüë© | Delta |\n *   ```\n *\n *   With [`string-width`](https://github.com/sindresorhus/string-width):\n *\n *   ```js\n *   import stringWidth from 'string-width'\n *\n *   markdownTable(\n *     [\n *       ['Alpha', 'Bravo'],\n *       ['‰∏≠Êñá', 'Charlie'],\n *       ['üë©‚Äç‚ù§Ô∏è‚Äçüë©', 'Delta']\n *     ],\n *     {stringLength: stringWidth}\n *   )\n *   ```\n *\n *   Yields:\n *\n *   ```markdown\n *   | Alpha | Bravo   |\n *   | ----- | ------- |\n *   | ‰∏≠Êñá  | Charlie |\n *   | üë©‚Äç‚ù§Ô∏è‚Äçüë©    | Delta   |\n *   ```\n */ /**\n * @typedef {Options} MarkdownTableOptions\n * @todo\n *   Remove next major.\n */ /**\n * Generate a markdown ([GFM](https://docs.github.com/en/github/writing-on-github/working-with-advanced-formatting/organizing-information-with-tables)) table..\n *\n * @param {ReadonlyArray<ReadonlyArray<string|null|undefined>>} table\n *   Table data (matrix of strings).\n * @param {Options} [options]\n *   Configuration (optional).\n * @returns {string}\n */ function markdownTable(table, options = {}) {\n    const align = (options.align || []).concat();\n    const stringLength = options.stringLength || defaultStringLength;\n    /** @type {Array<number>} Character codes as symbols for alignment per column. */ const alignments = [];\n    /** @type {Array<Array<string>>} Cells per row. */ const cellMatrix = [];\n    /** @type {Array<Array<number>>} Sizes of each cell per row. */ const sizeMatrix = [];\n    /** @type {Array<number>} */ const longestCellByColumn = [];\n    let mostCellsPerRow = 0;\n    let rowIndex = -1;\n    // This is a superfluous loop if we don‚Äôt align delimiters, but otherwise we‚Äôd\n    // do superfluous work when aligning, so optimize for aligning.\n    while(++rowIndex < table.length){\n        /** @type {Array<string>} */ const row = [];\n        /** @type {Array<number>} */ const sizes = [];\n        let columnIndex = -1;\n        if (table[rowIndex].length > mostCellsPerRow) {\n            mostCellsPerRow = table[rowIndex].length;\n        }\n        while(++columnIndex < table[rowIndex].length){\n            const cell = serialize(table[rowIndex][columnIndex]);\n            if (options.alignDelimiters !== false) {\n                const size = stringLength(cell);\n                sizes[columnIndex] = size;\n                if (longestCellByColumn[columnIndex] === undefined || size > longestCellByColumn[columnIndex]) {\n                    longestCellByColumn[columnIndex] = size;\n                }\n            }\n            row.push(cell);\n        }\n        cellMatrix[rowIndex] = row;\n        sizeMatrix[rowIndex] = sizes;\n    }\n    // Figure out which alignments to use.\n    let columnIndex = -1;\n    if (typeof align === \"object\" && \"length\" in align) {\n        while(++columnIndex < mostCellsPerRow){\n            alignments[columnIndex] = toAlignment(align[columnIndex]);\n        }\n    } else {\n        const code = toAlignment(align);\n        while(++columnIndex < mostCellsPerRow){\n            alignments[columnIndex] = code;\n        }\n    }\n    // Inject the alignment row.\n    columnIndex = -1;\n    /** @type {Array<string>} */ const row = [];\n    /** @type {Array<number>} */ const sizes = [];\n    while(++columnIndex < mostCellsPerRow){\n        const code = alignments[columnIndex];\n        let before = \"\";\n        let after = \"\";\n        if (code === 99 /* `c` */ ) {\n            before = \":\";\n            after = \":\";\n        } else if (code === 108 /* `l` */ ) {\n            before = \":\";\n        } else if (code === 114 /* `r` */ ) {\n            after = \":\";\n        }\n        // There *must* be at least one hyphen-minus in each alignment cell.\n        let size = options.alignDelimiters === false ? 1 : Math.max(1, longestCellByColumn[columnIndex] - before.length - after.length);\n        const cell = before + \"-\".repeat(size) + after;\n        if (options.alignDelimiters !== false) {\n            size = before.length + size + after.length;\n            if (size > longestCellByColumn[columnIndex]) {\n                longestCellByColumn[columnIndex] = size;\n            }\n            sizes[columnIndex] = size;\n        }\n        row[columnIndex] = cell;\n    }\n    // Inject the alignment row.\n    cellMatrix.splice(1, 0, row);\n    sizeMatrix.splice(1, 0, sizes);\n    rowIndex = -1;\n    /** @type {Array<string>} */ const lines = [];\n    while(++rowIndex < cellMatrix.length){\n        const row = cellMatrix[rowIndex];\n        const sizes = sizeMatrix[rowIndex];\n        columnIndex = -1;\n        /** @type {Array<string>} */ const line = [];\n        while(++columnIndex < mostCellsPerRow){\n            const cell = row[columnIndex] || \"\";\n            let before = \"\";\n            let after = \"\";\n            if (options.alignDelimiters !== false) {\n                const size = longestCellByColumn[columnIndex] - (sizes[columnIndex] || 0);\n                const code = alignments[columnIndex];\n                if (code === 114 /* `r` */ ) {\n                    before = \" \".repeat(size);\n                } else if (code === 99 /* `c` */ ) {\n                    if (size % 2) {\n                        before = \" \".repeat(size / 2 + 0.5);\n                        after = \" \".repeat(size / 2 - 0.5);\n                    } else {\n                        before = \" \".repeat(size / 2);\n                        after = before;\n                    }\n                } else {\n                    after = \" \".repeat(size);\n                }\n            }\n            if (options.delimiterStart !== false && !columnIndex) {\n                line.push(\"|\");\n            }\n            if (options.padding !== false && // Don‚Äôt add the opening space if we‚Äôre not aligning and the cell is\n            // empty: there will be a closing space.\n            !(options.alignDelimiters === false && cell === \"\") && (options.delimiterStart !== false || columnIndex)) {\n                line.push(\" \");\n            }\n            if (options.alignDelimiters !== false) {\n                line.push(before);\n            }\n            line.push(cell);\n            if (options.alignDelimiters !== false) {\n                line.push(after);\n            }\n            if (options.padding !== false) {\n                line.push(\" \");\n            }\n            if (options.delimiterEnd !== false || columnIndex !== mostCellsPerRow - 1) {\n                line.push(\"|\");\n            }\n        }\n        lines.push(options.delimiterEnd === false ? line.join(\"\").replace(/ +$/, \"\") : line.join(\"\"));\n    }\n    return lines.join(\"\\n\");\n}\n/**\n * @param {string|null|undefined} [value]\n * @returns {string}\n */ function serialize(value) {\n    return value === null || value === undefined ? \"\" : String(value);\n}\n/**\n * @param {string} value\n * @returns {number}\n */ function defaultStringLength(value) {\n    return value.length;\n}\n/**\n * @param {string|null|undefined} value\n * @returns {number}\n */ function toAlignment(value) {\n    const code = typeof value === \"string\" ? value.codePointAt(0) : 0;\n    return code === 67 /* `C` */  || code === 99 /* `c` */  ? 99 /* `c` */  : code === 76 /* `L` */  || code === 108 /* `l` */  ? 108 /* `l` */  : code === 82 /* `R` */  || code === 114 /* `r` */  ? 114 /* `r` */  : 0;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/markdown-table/index.js\n");

/***/ })

};
;